(1)QPS(每秒Query量)
QPS = Questions(or Queries) / seconds
mysql > show  global  status like 'Question%';
 
(2)TPS(每秒事务量)
TPS = (Com_commit + Com_rollback) / seconds
mysql > show global status like 'Com_commit';
mysql > show global status like 'Com_rollback';
 
(3)key Buffer 命中率
mysql>show  global   status  like   'key%';
key_buffer_read_hits = (1-key_reads / key_read_requests) * 100%
key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%
 
(4)InnoDB Buffer命中率
mysql> show status like 'innodb_buffer_pool_read%';
innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%
 
(5)Query Cache命中率
mysql> show status like 'Qcache%';
Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;
 
(6)Table Cache状态量
mysql> show global  status like 'open%';
比较 open_tables  与 opend_tables 值
 
(7)Thread Cache 命中率
mysql> show global status like 'Thread%';
mysql> show global status like 'Connections';
Thread_cache_hits = (1 - Threads_created / connections ) * 100%
 
(8)锁定状态
mysql> show global  status like '%lock%';
Table_locks_waited/Table_locks_immediate=0.3%  如果这个比值比较大的话，说明表锁造成的阻塞比较严重
Innodb_row_lock_waits innodb行锁，太大可能是间隙锁造成的
 
(9)复制延时量
mysql > show slave status
查看延时时间
 
(10) Tmp Table 状况(临时表状况)
mysql > show status like 'Create_tmp%';
Created_tmp_disk_tables/Created_tmp_tables比值最好不要超过10%，如果Created_tmp_tables值比较大，
可能是排序句子过多或者是连接句子不够优化
 
(11) Binlog Cache 使用状况
mysql > show status like 'Binlog_cache%';
如果Binlog_cache_disk_use值不为0 ，可能需要调大 binlog_cache_size大小
 
(12) Innodb_log_waits 量
mysql > show status like 'innodb_log_waits';
Innodb_log_waits值不等于0的话，表明 innodb log  buffer 因为空间不足而等待




统计最近N秒内的QPS值(包括每秒select，insert等值)

mysql> select variable_name,sum(per_sec) as qps from (select straight_join   lower(gs0.variable_name) as variable_name,  (gs1.variable_value - gs0.variable_value)/5 as per_sec from (     select variable_name ,variable_value     from information_schema.global_status where variable_name in ('com_select','com_update','com_insert','com_replace','com_delete')     union all     select '',sleep(5) from dual   ) as gs0    join information_schema.global_status gs1 using (variable_name)) t  group by variable_name with rollup;

+---------------+---------+
| variable_name | qps     |
+---------------+---------+
| com_delete    |       0 |
| com_insert    |     2.2 |
| com_replace   |       0 |
| com_select    | 11524.8 |
| com_update    |       3 |
| NULL          |   11530 |
+---------------+---------+
6 rows in set (5.00 sec)

统计db启动以来的qps值，慢查询数量等信息

mysql> \s
--------------
mysql  Ver 14.14 Distrib 5.5.35, for Linux (x86_64) using readline 5.1


Connection id: 98313987
Current database: udb
Current user: ucloud@172.23.0.48
SSL: Not in use
Current pager: stdout
Using outfile: ''
Using delimiter: ;
Server version: 5.5.35-log MySQL Community Server (GPL) by Remi
Protocol version: 10
Connection: 172.23.9.201 via TCP/IP
Server characterset: utf8
Db     characterset: utf8
Client characterset: utf8
Conn.  characterset: utf8
TCP port: 3206
Uptime: 274 days 1 hour 22 min 29 sec


Threads: 172  Questions: 7559640986  Slow queries: 150149138  Opens: 7799  Flush tables: 15  Open tables: 973  Queries per second avg: 319.261




mysql-binlog_cache_size

二进制日志缓冲区吗，默认是32k。该参数是基于会话的，不要设置过大。

当事务的记录大于设定的binlog_cache_size时，mysql会把缓冲区中的日志信息写入一个临时文件中，所以该值也不能设置过小。

查看设置
   
mysql> show variables like 'binlog_cache_size';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| binlog_cache_size | 32768 |
+-------------------+-------+
1 row in set (0.00 sec)
 
mysql>

验证binlog_cache_size设置是否合理

通过查看show global status中的，Binlog_cache_disk_use和Binlog_cache_use

分析下面的结果，可以看出binlog_cache_size设置低了。
   
mysql> show global status like 'binlog_cache_%';
+-----------------------+-------+
| Variable_name         | Value |
+-----------------------+-------+
| Binlog_cache_disk_use | 1008  | #记录了使用临时文件写二进制日志的次数
| Binlog_cache_use      | 5721  | #使用缓冲的次数
+-----------------------+-------+
2 rows in set (0.00 sec)
 
mysql>



innodb_flush_log_at_trx_commit

有效取值为0、1、2。建议设置为xxxxx 自行决定

-1：执行commit的时将重做日志缓冲区同步写到磁盘，即伴有fsync调用


-2：执行commit的时将重做日志异步写到磁盘，即先写到文件系统的缓冲中(因为文件系统是有缓存的)。不能完全保证在执行commit时肯定会写入重做日志文件。设为1最安全，性能最差


-0：log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作。（执行是由mysql的master thread线程来执行的。主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交。）
